{"version":3,"sources":["components/toDo/toDo.module.css","components/task/task.module.css","components/task/task.js","components/createTask/createTask.js","Aux.js","components/toDo/toDo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","todocontainer","header","createtask","task","Task","props","react_default","a","createElement","className","style","textDecoration","completed","title","background","onClick","remove","complete","index","createReact","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","event","preventDefault","onaddTask","type","margin","width","outline","border","padding","onChange","target","aux","children","ToDo","remainingTasks","setRemainingTasks","_useState3","_useState4","tasks","setTasks","useEffect","filter","length","completeTask","newTasks","toConsumableArray","removeTask","splice","Aux","map","task_task","key","createTask","concat","App","toDo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbfff8db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todocontainer\":\"toDo_todocontainer__3pWa-\",\"header\":\"toDo_header__1NY1Y\",\"createtask\":\"toDo_createtask__2VtxX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"task_task__zMeLd\"};","import React from 'react';\r\nimport style from './task.module.css';\r\n\r\nconst Task=(props)=>{\r\nconst shitTask=()=>{\r\n  props.complete(props.index);\r\n};\r\n\r\nreturn(\r\n    <div className={style.task}\r\n    style={{ textDecoration: props.task.completed ? \"line-through\" : \"\" }}>\r\n      {props.task.title}\r\n      <button style={{ background: \"red\" }} onClick={props.remove}>x</button>\r\n      <button onClick={shitTask}>Completed</button>\r\n\r\n    </div>\r\n);\r\n\r\n};\r\n\r\nexport default Task;","import React,{useState} from 'react';\r\n\r\nconst createReact=(props)=>{\r\n   const [value,setValue]=useState(\"\");\r\n\r\n   const handleSubmit=event=>{\r\n    event.preventDefault();\r\n        props.onaddTask(value);\r\n        setValue(\"\")\r\n   };\r\nreturn(\r\n    <div >\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\"\r\n             style={{ margin:\"2.5em 2em\",\r\n                width: \"80%\",\r\n                outline: \"none\",\r\n                border: \"none\",\r\n                padding: \"0.7em\"}}\r\n             value={value}\r\n             onChange={(event)=>(setValue(event.target.value))}/>\r\n        </form>\r\n    </div>\r\n);\r\n};\r\n\r\nexport default createReact;\r\n","const aux= (props) => props.children;\r\nexport default aux;","import React,{useState,useEffect} from 'react';\r\nimport style from './toDo.module.css';\r\nimport Task from './../task/task';\r\nimport CreateTask from './../createTask/createTask';\r\nimport Aux from './../../Aux';\r\n\r\n const ToDo=()=> {\r\n     const [remainingTasks,setRemainingTasks]=useState(0);\r\n    const [tasks, setTasks] = useState([ \r\n     {\r\n        title: \"Grab some Pizza\",\r\n        completed: true\r\n    },\r\n    {\r\n        title: \"Do your workout\",\r\n        completed: true\r\n    },\r\n    {\r\n        title: \"Hangout with friends\",\r\n        completed: false\r\n    }\r\n]);\r\n\r\n    useEffect(()=>(\r\n       setRemainingTasks (tasks.filter(task=>!task.completed).length)\r\n    ));\r\n     \r\n     const addTask = title => {\r\n        const newTasks = [...tasks, { title, completed: false }];\r\n        setTasks(newTasks);\r\n    };\r\n    \r\n    const completeTask = index => {\r\n        const newTasks = [...tasks];\r\n        newTasks[index].completed = true;\r\n        setTasks(newTasks);\r\n    };\r\n    \r\n    const removeTask = index=> {\r\n        const newTasks = [...tasks];\r\n        newTasks.splice(index, 1);\r\n        setTasks(newTasks);\r\n    };\r\n\r\n\r\n   \r\n     return( \r\n         <Aux>\r\n         <div className={style.todocontainer}>\r\n             <div className={style.header}> Pending Tasks : \r\n                {remainingTasks}\r\n             </div>\r\n             <div className={style.tasks}>\r\n                 {tasks.map((task,index)=>(\r\n                    <Task\r\n                      task={task}\r\n                      index={index}\r\n                      key={index}\r\n                      complete={completeTask}\r\n                      remove={removeTask}\r\n                      />\r\n                 ))}\r\n                 <div className={style.createtask}>\r\n                     <CreateTask onaddTask={addTask} />\r\n                 </div>\r\n             </div>\r\n     </div>\r\n     </Aux>\r\n     );\r\n\r\n};\r\n\r\nexport default ToDo;\r\n","import React from 'react';\nimport './App.css';\nimport ToDo from './components/toDo/toDo';\nfunction App() {\n  return (\n    <div >\n      <ToDo />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}